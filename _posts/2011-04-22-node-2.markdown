---
layout: post
title: A Gentle Introduction to Node - 2
tags: [node, nodejs, programming, javascript]
categories: [js]
---

Previously: [A Gentle Introduction to Node - 1][1]

If you've not read the first post, please read it ! (especially the [resources][2] section to get a good understanding of how Node works.

So let's dive in. We're going to be building a simple looking homepage for me using a static file server in Node.JS. I agree that's probably not what Node is best at, but at some point in your life you are going to want to serve static files to the browser.

Let's dive in. The code may look big and mean, but it's actually really easy to understand.

{% highlight javascript %}
var http = require('http');
var url = require('url');
var fs = require('fs');
var server = http.createServer(function (req,res) {
	var path = url.parse(req.url).pathname;
	switch(path) {
	
	// This is a trivial implementation of URL routing.		
	
		case '/' :	
	res.writeHead(200, {'Content-Type' : 'text/html'});
	res.write('Welcome, you have reached my homepage. ' + 
	'You can check out my twitter profile ' + 
	'<a href="https://twitter.com/hardikr">here</a>' + 
	'<p>Sitemap</p>' + 
	'<li><a href="about">About</a>' + 
	'<li><a href="image.png">My Favorite XKCD comic</a>'
	);
	res.end();
	break;

		case '/about' : 
	res.writeHead(200, {'Content-Type' : 'text/html'});
	res.write('My name is Hardik. That\'s all :| ' + 
	'<br/> <a href="/">Go Back</a>'
	);
	res.end();
	break;

		case '/image.png' : 
	fs.readFile(__dirname + path, function(err, data) {
		if(err) throw err;
		res.writeHead(200, {'Content-Type' : 'image/png'});
		res.write(data,'utf8');
		res.end();
	});
	break;

		case 'default': 	
	res.writeHead(404, {'Content-Type' : 'text/plain'});
	res.write('Page Not Found. 404');
	res.end();
	
	}

}).listen(8080);
console.log('Server started at http://localhost:8080');
{% endhighlight %}

As discussed before, Node uses modules which you can include in your code to let you do awesome stuff. Just like Python, Node is an uber-cool Swiss Army Knife, only there's no limit to how far you can customize the modules you need to include. You can even use the hundreds of third party modules already available, and when you're confident enough, you can build your own modules to serve your needs.

{% highlight javascript %}
var http = require('http');
var url = require('url');
var fs = require('fs');
{% endhighlight %}

So, we start off with importing the `http` module (which we used in the previous post), along with the `url` and the `fs` module. The `url` module lets us manipulate the URL fragment of the incoming request, which we'll see later on, and the `fs` module is the File System module, which we'll use to read a local file and display it to the browser.

{% highlight javascript %}
var server = http.createServer(function (req,res) {
 var path = url.parse(req.url).pathname;
{% endhighlight %}

Next, we initialize our server object, with our `req` (request) and `response` (response) objects coming in as parameters to the callback function. If you paid attention last week, you may have realized we never used the request object. Well, we're gonna do that right now. 

We parse the requested URL (that you type in the browser eg : `http://example.com/about` ) using the `url.parse` method of the `url` module we imported, and we extract the requested pathname. in the above URL, it is `/about`.

After that, it's pretty self explanatory. We use the `switch` method (which I presume you know). The first case, we test for the root of our homepage - for which the pathname would be `/`. We write the response headers and body just like last time, and end the output with `res.end()`. Don't forget to put your break statement. Similarly, we test for `/about` and send my about page.

{% highlight javascript %}
fs.readFile(__dirname + path, function(err, data) {
 if(err) throw err;
 res.writeHead(200, {'Content-Type' : 'image/png'});
 res.write(data,'utf8');
 res.end();
});
{% endhighlight %}

But now, I want to send over a PNG image as my favorite XKCD comic. I have a file named image.png lying in the same folder as my server.js file which I want to serve. Logically, I have to read the file from my Node.JS code first. I can do this with the `readFile` method. 

`__dirname` specifies the current working directory (where the Node server file is present), and we append to it the path that we extracted from `url.parse(req.url).pathname` hence building the absolute path to the `image.png` file on the UNIX filesystem. We use an anonymous callback function which will return the file as an object `data`.

I check for any errors, if found will be thrown. I write the HTTP response header, but this time my `Content-Type` is set to `image/png` since I'm returning a PNG image. I pass along the file object `data` which contains the PNG file and end my output stream with `res.end()`.

The `default` case will be selected if the client requests one of the paths we're not checking for; and it sends over a simple 404 error.

That's pretty much it. We have our working homepage, and you can test it out! You can get to designing your webpage in Node and host it over at EC2 which I think is still offering one year of free micro-instances :)

Since this is just a demo, the number of files are small. In the real world for a bigger homepage, obviously we would not want to include all your HTML in the Node.JS server code. That wouldn't be too smart of us!

One way would be to use the excellent [Express][3] framework along with [Connect][4] middleware; but let's leave that for later on, when we're more experienced with pure Node.JS code. 

Another way would be to build a static file server function, to which we can pass as parameter the file we wish to serve! Good ol' functions !

[1]: http://blog.hardikr.com/js/node-1/ "The first post in the series"
[2]: http://blog.hardikr.com/js/node-1/#resources "Resources in first post"
[3]: https://github.com/visionmedia/express "Express on GitHub"
[4]: https://github.com/senchalabs/connect "Connect on GitHub"
