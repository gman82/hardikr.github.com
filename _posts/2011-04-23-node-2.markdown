---
layout: post
title: A Gentle Introduction to Node - 2
tags: [node, nodejs, programming, javascript]
categories: [js]
---

_Previously: [A Gentle Introduction to Node - 1][1]_

If you've not read the [first post][1], please read it ! (especially the [resources][2] section to get a good understanding of how Node works.

So let's dive in. We're going to be building a simple looking homepage for me using a static file server in Node.JS. I agree that's probably not what Node is best at, but at some point in your life you are going to want to serve static files to the browser.

Let's dive in. The code may look big and mean, but it's actually really easy to understand. And please, type out the code, especially if you're new to Javascript. If you want to view it in your code editor, grab the code [here][8].

{% highlight javascript %}
var http = require('http');
var fs = require('fs');
var server = http.createServer(function (req,res) {
	var path = req.url;
	switch(path) {
	
	// This is a trivial implementation of URL routing.		
	
		case '/' :	
	res.writeHead(200, {'Content-Type' : 'text/html'});
	res.write('Welcome, you have reached my homepage. ' + 
	'You can check out my twitter profile ' + 
	'<a href="https://twitter.com/hardikr">here</a>' + 
	'<p>Sitemap</p>' + 
	'<li><a href="about">About</a>' + 
	'<li><a href="image.png">My Favorite XKCD comic</a>'
	);
	res.end();
	break;

		case '/about' : 
	res.writeHead(200, {'Content-Type' : 'text/html'});
	res.write('My name is Hardik. That\'s all :| ' + 
	'<br/> <a href="/">Go Back</a>'
	);
	res.end();
	break;

		case '/image.png' : 
	fs.readFile(__dirname + path, function(err, data) {
		if(err) throw err;
		res.writeHead(200, {'Content-Type' : 'image/png'});
		res.write(data,'utf8');
		res.end();
	});
	break;

		case 'default': 	
	res.writeHead(404, {'Content-Type' : 'text/plain'});
	res.write('Page Not Found. 404');
	res.end();
	
	}

}).listen(8080);
console.log('Server started at http://localhost:8080');
{% endhighlight %}

As discussed before, Node uses modules which you can include in your code to let you do awesome stuff. Just like Python, Node is an uber-cool Swiss Army Knife, only there's no limit to how far you can customize the modules you need to include. You can even use the hundreds of third party modules already available, and when you're confident enough, you can build your own modules to serve your needs.

{% highlight javascript %}
var http = require('http');
var fs = require('fs');
{% endhighlight %}

So, we start off with importing the `http` module (which we used in the previous post), along with the `fs` module. The `fs` module is the File System module, which we'll use to read a local file and display it to the browser.

{% highlight javascript %}
var server = http.createServer(function (req,res) {
 var path = req.url;
{% endhighlight %}

Next, we initialize our server object, with our `req` (request) and `res` (response) objects coming in as parameters to the callback function. If you read the last post carefully, you may have realized we never used the request object for anything. Well, we're gonna do that right now. 

We obtain the requested URL by accessing `req.url` value (from the `req` object). To illustrate, if I accessed `http://example.com/about`, then `req.url` returns `/about`. (Note, you can get a detailed look at the request object by simply doing `console.log(req)`. Similarly, you can log pretty much anything if you're not sure about something. It's actually a good way of debugging Node.JS code. Note that the log will appear in your terminal and not in your browser since this is server-side Javascript.)

_**Note**_: I'm taking a little detour here. In several open-source projects, I've seen the following code used to extract the pathname:

{% highlight javascript %}
var url = require('url') // Include the url module for url.parse
/** 
 * similar code until we get to defining our path
**/
var path = url.parse(req.url).pathname;
{% endhighlight %}

To make sure you're on track, if the browser requested `http://example.com/about`, then req.url contains `/about`. Coming to the above code, `url.parse` is a method from the `url` module that creates a `url` object out of a URL string. Don't be confused, hang on! I'm illustrating the use of url.parse() on a sample string:

{% highlight javascript %}
var urlString = 'http://example.com/about'; 
var urlObject = url.parse(urlString);
console.log(urlObject);
{% endhighlight %}

This returns the `url` object of the string we declared:

{% highlight javascript %}
{ protocol: 'http:',
  slashes: true,
  host: 'example.com',
  hostname: 'example.com',
  pathname: '/about',
  href: 'http://example.com/about' }
{% endhighlight %}

So, going back to the code,

{% highlight javascript %}
var path = url.parse(req.url).pathname;
{% endhighlight %}

Since the requested URL is `http://example.com/about`, `req.url` already contains `/about`. So, if we were to use `url.parse(req.url)` , it would convert `/about` into an object, like so:

{% highlight javascript %}
{ pathname: '/about', href: '/about' }
{% endhighlight %}

Summing up, the code is unnecessarily (in my opinion) converting `/about` into a URL object, and extracting the `pathname` which would return the same `/about`. I'm not too sure why [so many projects][6] use this. It's almost like I'm missing out something. If you know why, do [tweet][7] me !

Alright, let's get back to our own code. To recap, we just assigned `path` to the requested path by using `req.url`.

After that, it's pretty self explanatory. We use the `switch` method (which I presume you know). The first case, we test for the root of our homepage - for which the pathname would be `/`. We write the response headers and body just like last time, and end the output with `res.end()`. Don't forget to put your `break` statement. Similarly, we test for `/about` and send my about page.

{% highlight javascript %}
fs.readFile(__dirname + path, function(err, data) {
 if(err) throw err;
 res.writeHead(200, {'Content-Type' : 'image/png'});
 res.write(data,'utf8');
 res.end();
});
{% endhighlight %}

But now, I want to send over a PNG image as my favorite XKCD comic. I have a file named image.png lying in the same folder as my server.js file which I want to serve. Logically, I have to read the file from my Node.JS code first. I can do this with the `readFile` method. 

`__dirname` specifies the current working directory (where the Node server file is present), and we append to it the path that we extracted from `url.parse(req.url).pathname` hence building the absolute path to the `image.png` file on the UNIX filesystem. We use an anonymous callback function which will return the file as an object `data`.

I check for any errors, if found will be thrown. I write the HTTP response header, but this time my `Content-Type` is set to `image/png` since I'm returning a PNG image. I pass along the file object `data` which contains the PNG file and end my output stream with `res.end()`.

The `default` case will be selected if the client requests one of the paths we're not checking for; and it sends over a simple 404 error.

That's pretty much it. We have our working homepage, and you can test it out! If you want something like this for yourself on the Internet, you can get to designing your webpage in Node and host it over at Amazon EC2 which I think is still offering one year of free micro-instances :)  

Since this is just a demo, the number of files are small, and the amount of HTML is small. Realistically, for a bigger homepage, obviously we would not want to include all your HTML in the Node.JS server code. That wouldn't be too smart of us!

One way would be to use the excellent [Express][3] framework along with [Connect][4] middleware; but let's leave that for later on, when we're more experienced with pure Node.JS code. I suggest this in the same vein as people will tell you to start off with pure Javascript and then to go jQuery.

Another way would be to build a static file server function, to which we can pass as parameter the file we wish to serve. Good ol' functions !

You should try writing that code on your own. But, here are a few hints.
- You'll have to write the `/` as an index.html file, and `/about` as about.html, and pass them as parameters to the static file server.
- You can use the same static file server function above and generalize it.

The solution can be found, if you know where to look! So, till next time, where we'll run bash functions through Node code! 

A few words before we part, as I said before, keep perusing the Node documentation. It's quite small and easy to understand. There are a lot of methods which you may like to play around with. I'm deliberately keeping it simple in the blog post, since I want everyone to read the Node docs.

You could also look at the hundreds of thousands of lines of open-sourced Node.JS code. Just [search][5] on GitHub. At the end of next week's post on running bash functions, we'll take a look into a third-party Node.JS module that'll turn our command line into a dictionary! How cool is that ?! Hang on till next week! 

[1]: http://blog.hardikr.com/js/node-1/ "The first post in the series"
[2]: http://blog.hardikr.com/js/node-1/#resources "Resources in first post"
[3]: https://github.com/visionmedia/express "Express on GitHub"
[4]: https://github.com/senchalabs/connect "Connect on GitHub"
[5]: https://github.com/search?q=Node&type=Everything&repo=&langOverride=&start_value=1 "GitHub search for Node"
[6]: https://github.com/search?q=path+%3D+url.parse%28req.url%29.pathname&type=Everything&repo=&langOverride=&start_value=1 "GitHub search for url.parse"
[7]: https://twitter.com/hardikr "My Twitter"
[8]: https://github.com/hardikr/hardikr.github.com/raw/master/static/node/post2/post2.js
